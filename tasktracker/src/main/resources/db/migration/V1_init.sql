create table if not exists public.my_users
(
    id       bigint generated by default as identity
        primary key,
    email    varchar(255),
    name     varchar(255),
    password varchar(255),
    role     varchar(255)
        constraint my_users_role_check
            check ((role)::text = ANY ((ARRAY ['PERFORMER'::character varying, 'MANAGER'::character varying])::text[])),
    username varchar(255)
);

alter table public.my_users
    owner to postgres;

create table if not exists public.tasks
(
    time_spent     numeric(21),
    timer_active   boolean not null,
    assigned_to_id bigint
        constraint tasks_my_users_id_fk
            references public.my_users,
    id             bigint generated by default as identity
        primary key,
    last_started   timestamp(6),
    description    varchar(255),
    status         varchar(255)
        constraint tasks_status_check
            check ((status)::text = ANY
                   ((ARRAY ['NEW'::character varying, 'IN_PROGRESS'::character varying, 'COMPLETED'::character varying, 'ON_HOLD'::character varying])::text[])),
    title          varchar(255)
);

alter table public.tasks
    owner to postgres;

create table if not exists public.comments
(
    created_at timestamp(6),
    id         bigint generated by default as identity
        primary key,
    task_id    bigint
        constraint comments_tasks_id_fk
            references public.tasks,
    user_id    bigint
        constraint comments_my_users_id_fk
            references public.my_users,
    content    varchar(255)
);

alter table public.comments
    owner to postgres;

create table if not exists public.tasks_watchers
(
    task_id     bigint not null
        constraint tasks_watchers_tasks_id_fk
            references public.tasks,
    watchers_id bigint not null
        constraint tasks_watchers_my_users_id_fk
            references public.my_users
);

alter table public.tasks_watchers
    owner to postgres;

